custom_require.call(%w[common common-healing common-items common-money common-travel drinfomon])

class BoggleBlast
  include DRC
  include DRCH
  include DRCI
  include DRCM
  include DRCT

  def initialize
    @stow_container = "backpack" # set this to be your main default storage container - i.e. the one used in STORE LIST set to default
    @full_container = "haversack" # this container is used to store full 100k HE ticket stacks, set it to a DIFFERENT container than the default
    @currency = "dokoras" # don't change this
    @withdraw = true # change to false if you don't want to withdraw more money when you run out
	@portal_room = 2780 # 2780 = Shard, 932 = Crossing, no clue about the others
    if DRSkill.getrank('Slings') >= 500
      @cash = 500 # change to whatever amount you want to withdraw at a time
      @denomination = "platinum" # change to whatever valid denomination you'd like
    else
      @cash = 5 # This is the amount used if you have an elevated risk of injury or death due to low skill, suggest keeping it low
      @denomination = "platinum" # change to whatever valid denomination you'd like
    end
    @trash_items = ['robe', 'blouse', 'pajamas', 'cambrinth armband', 'pants', 'anklet', 'towel', 'keyblank', 'blossom', 'amulet', 'greatcloak', 'cloak', 'coat', 'shirt', 'pumpkins', 'mirror', 'globe', 'earrings', 'wings', 'compass', 'cambrinth pumpkin', 'spectacles', 'jar', 'clay', 'fabric', 'strands', 'flamewood case', 'boggle ring', 'leather boots', 'tomiek-rimmed goggles', 'scarecrow doll', 'boggle doll', 'heart', 'garnet', 'comb', 'tomiek ring', 'animite ring', 'wooden earcuff', 'orange hat', 'wooden armband', 'gem pouch', 'sling', 'seeds', 'purse', 'simple necklace', 'electrum charm', 'glass pestle', 'cookie', 'candy', 'pumpkin pie', 'mortar', 'ring', 'statuette', 'lollipop', 'trousers', 'rocks', 'carving knife', 'beer', 'pendant', 'torque', 'rose'] # this is my list of trash items, add/remove what nouns you like
    @danger_items = ['doll'] # todo: add this in to trash_items?
    @fake_pumpkins = ['wooden pumpkins', 'cambrinth pumpkin']
    do_boggle_crap
  end

  def do_boggle_crap
    loop do
      heal_up
      stow_hands
      ditch_pumpkins
      empty_hands
      check_money
      go_play
      check_prize
    end
  end

  def heal_up
    check_health
    if bleeding?
      walk_to('19104')
      bput("go path", "Obvious paths: none")
      pause 5 # assumes quick spider travel option purchased
      wait_for_script_to_complete('safe-room')
      pause
      walk_to(@portal_room)
      bput("go path", "Obvious paths: none")
      pause 5 # assumes quick spider travel option purchased
      walk_to('10584')
      pause
    end
  end

  def check_money
    get_money if check_wealth('dokoras') < 200 && @withdraw
  end

  def get_money
    walk_to('10358')
    case bput("withdraw #@cash #@denomination #@currency ", 'The clerk counts out', 'The clerk tells you', 'You must be at')
    when "The clerk counts out"
      echo "got cash"
      return
    else
      echo "Out of cash!"
      exit
    end
  end

  def go_play
    walk_to('10584')
    unless bput('give farmer 200 dokoras', 'The farmer takes your money', 'Sorry, the game rooms are all full right now') == "The farmer takes your money"
      while line = get
        if line =~ /^The pumpkin farmer (beams happily|grins) at/
          response = bput('give farmer 200 dokoras', 'The farmer takes your money', 'Sorry, the game rooms are all full right now')
          next if response =~ /Sorry, the game rooms are all full right now/
          break if response =~ /The farmer takes your money/
        end
      end
    end
    5.times do
      @true_pumpkin = false
      get_pumpkin while !@true_pumpkin
      case bput('load slingshot', 'You carefully load', "You need to have a pumpkin")
      when "You need to have a pumpkin"
        stow_hands
        @true_pumpkin = false
        get_pumpkin while !@true_pumpkin
        bput('load slingshot', 'You carefully load')
      end
      case bput('fire slingshot', 'You position the slingshot', 'You let loose', 'You carefully aim the', 'You really should be standing to play', 'You fire the slingshot and awkwardly', 'You take careful aim')
      when 'You really should be standing to play'
        bput('stand', 'You stand back up')
        bput('fire slingshot', 'You position the slingshot', 'You let loose', 'You carefully aim the', 'You fire the slingshot and awkwardly', 'You take careful aim')
      end
      pause
    end
    pause
    case bput("go door", "Obvious exits", "You must be standing to do that")
    when "You must be standing to do that"
      bput('stand', 'You stand back up')
      bput("go door", "Obvious exits")
    end
    bput("get prize", "The pumpkin farmer beams happily at you", "The pumpkin farmer grins at you")
    pause
  end

  def get_pumpkin
    @true_pumpkin = false
    case bput('get pumpkin', 'You help yourself', 'You pick up')
    when 'You pick up'
      if @fake_pumpkins.any? { |item| Regexp.new(item) =~ right_hand }
        stow_hands
      else
        @true_pumpkin = true
      end
    else
      @true_pumpkin = true
    end
  end

  def check_prize
    if @trash_items.any? { |item| Regexp.new(item) =~ right_hand }
      bput("put my #{righthand} in bucket", "You put", "You drop")
    elsif @danger_items.any? { |item| Regexp.new(item) =~ right_hand }
      pause
      bput("put my doll in bucket", "An odd sort of noise comes from your doll")
    elsif right_hand.include?('wallet')
      bput("put my wallet in my haversack", "You put")
    elsif right_hand.include?('fan')
      bput("close my fan", "With a practiced")
      bput("put my #{right_hand} in bucket", "You put", "You drop")
    elsif right_hand.include?('ticket')
      bput("get ticket in my #@stow_container", "You get")
      case bput("combine my ticket", "You combine", "You can't have")
      when "You can't have"
        bput("stow right", "You put")
        pause
        bput("put my ticket in my #@full_container", "You put")
      end
      bput("stow my ticket", "You put")
    else
      bput("stow right", "You put", "You open")
    end
    fput "dump junk"

  end

  def ditch_pumpkins
    @ditch = true
    while @ditch
      case bput("get pumpkin from my #@stow_container", "You get", "What were you")
      when "You get"
        bput("put my pumpkin in bucket", "You put", "You drop")
      else
        @ditch = false
      end
    end
  end
end

BoggleBlast.new
